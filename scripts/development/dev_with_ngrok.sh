#!/bin/bash
# Development script that starts both the Flask server and ngrok
# and automatically configures environment variables

set -e

PORT=8080
NGROK_API="http://localhost:4040/api/tunnels"

echo "🚀 Starting Hermes Backend with ngrok tunnel..."
echo ""

# Check if ngrok is installed
if ! command -v ngrok &> /dev/null; then
    echo "❌ Error: ngrok is not installed"
    echo ""
    echo "Install ngrok:"
    echo "  macOS:  brew install ngrok/ngrok/ngrok"
    echo "  Or download from: https://ngrok.com/download"
    echo ""
    exit 1
fi

# Check if server is already running
if lsof -Pi :$PORT -sTCP:LISTEN -t >/dev/null 2>&1 ; then
    echo "⚠️  Port $PORT is already in use"
    echo "Kill existing process? (y/n)"
    read -r response
    if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
        lsof -ti:$PORT | xargs kill -9
        echo "✅ Killed existing process"
        sleep 2
    else
        exit 1
    fi
fi

# Start ngrok in background
echo "📡 Starting ngrok tunnel..."
ngrok http $PORT --log=stdout > /tmp/ngrok.log 2>&1 &
NGROK_PID=$!

# Wait for ngrok to start
echo "⏳ Waiting for ngrok to initialize..."
sleep 3

# Get ngrok URL
NGROK_URL=""
MAX_ATTEMPTS=10
ATTEMPT=0

while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
    if curl -s $NGROK_API > /dev/null 2>&1; then
        NGROK_URL=$(curl -s $NGROK_API | python3 -c "import sys, json; print(json.load(sys.stdin)['tunnels'][0]['public_url'])" 2>/dev/null || echo "")
        if [ ! -z "$NGROK_URL" ]; then
            break
        fi
    fi
    ATTEMPT=$((ATTEMPT + 1))
    sleep 1
done

if [ -z "$NGROK_URL" ]; then
    echo "❌ Failed to get ngrok URL"
    kill $NGROK_PID 2>/dev/null || true
    exit 1
fi

# Convert to WSS for WebSocket
NGROK_WSS_URL=$(echo $NGROK_URL | sed 's/https/wss/')

echo ""
echo "✅ ngrok tunnel active!"
echo "   Public URL: $NGROK_URL"
echo "   WebSocket:  $NGROK_WSS_URL"
echo ""

# Update .env.local with ngrok URLs
cat > .env.local << EOF
# Auto-generated by dev_with_ngrok.sh
# DO NOT COMMIT THIS FILE

# ngrok URLs for local development
WEBHOOK_BASE_URL=$NGROK_URL
WEBSOCKET_BASE_URL=$NGROK_WSS_URL

# ngrok Dashboard: http://localhost:4040
EOF

echo "📝 Created .env.local with ngrok URLs"
echo ""

# Function to cleanup on exit
cleanup() {
    echo ""
    echo "🛑 Shutting down..."
    kill $NGROK_PID 2>/dev/null || true
    kill $SERVER_PID 2>/dev/null || true
    rm -f .env.local
    echo "✅ Cleanup complete"
    exit 0
}

trap cleanup SIGINT SIGTERM

# Start Flask server
echo "🌐 Starting Flask server..."
echo ""

# Check if venv exists and has dependencies installed
if [ ! -d "venv" ]; then
    echo "❌ Error: Virtual environment not found"
    echo "Run: make install"
    kill $NGROK_PID 2>/dev/null || true
    exit 1
fi

# Check if Flask is installed
if ! ./venv/bin/python -c "import flask" 2>/dev/null; then
    echo "❌ Error: Dependencies not installed in virtual environment"
    echo "Run: make install"
    kill $NGROK_PID 2>/dev/null || true
    exit 1
fi

# Export Flask config
export FLASK_ENV=development
export FLASK_APP=run.py

# Load .env file first (base configuration)
if [ -f .env ]; then
    echo "📝 Loading .env configuration..."
    # Use set -a to auto-export, but handle the file properly
    set -a
    # Source the file line by line, skipping comments
    while IFS= read -r line || [ -n "$line" ]; do
        # Skip empty lines and comments
        [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]] && continue
        # Export the line
        eval "export $line" 2>/dev/null || true
    done < .env
    set +a
fi

# Load .env.local (ngrok URLs override)
if [ -f .env.local ]; then
    echo "📝 Loading .env.local (ngrok URLs)..."
    set -a
    while IFS= read -r line || [ -n "$line" ]; do
        [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]] && continue
        eval "export $line" 2>/dev/null || true
    done < .env.local
    set +a
fi

# Explicitly export ngrok URLs for Python to pick up
export WEBHOOK_BASE_URL=$NGROK_URL
export WEBSOCKET_BASE_URL=$NGROK_WSS_URL

# Configure gevent DNS resolver to fix DNS issues with Google APIs
export GEVENT_RESOLVER=dnspython

echo "📝 Environment configured:"
echo "   WEBHOOK_BASE_URL=$WEBHOOK_BASE_URL"
echo "   WEBSOCKET_BASE_URL=$WEBSOCKET_BASE_URL"
echo "   GEVENT_RESOLVER=$GEVENT_RESOLVER"
echo ""

# Use gunicorn with gevent worker for WebSocket support
./venv/bin/gunicorn --config gunicorn.conf.py run:app &
SERVER_PID=$!

# Wait a bit for server to start
sleep 3

echo ""
echo "═══════════════════════════════════════════════════════════"
echo "🎉 Development environment ready!"
echo "═══════════════════════════════════════════════════════════"
echo ""
echo "📍 Local URLs:"
echo "   Server:     http://localhost:$PORT"
echo "   ngrok:      $NGROK_URL"
echo "   Dashboard:  http://localhost:4040"
echo ""
echo "🔗 For Attendee API, use these URLs:"
echo "   Webhook:    $NGROK_URL/api/v1/prism/webhook"
echo "   WebSocket:  $NGROK_WSS_URL/api/v1/prism/bot-audio"
echo ""
echo "💡 Test WebSocket:"
echo "   wscat -c ws://localhost:$PORT/api/v1/prism/start-session"
echo ""
echo "Press Ctrl+C to stop all services"
echo "═══════════════════════════════════════════════════════════"
echo ""

# Wait for server process
wait $SERVER_PID

