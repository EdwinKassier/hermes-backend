#!/usr/bin/env python3
"""
Get ngrok URL and optionally update .env.local file

Usage:
    python scripts/get_ngrok_url.py              # Print URL
    python scripts/get_ngrok_url.py --update     # Update .env.local
    python scripts/get_ngrok_url.py --env        # Print export statements
"""

import json
import sys
import argparse
from urllib.request import urlopen
from urllib.error import URLError


def get_ngrok_url():
    """Get ngrok URL from local API."""
    try:
        response = urlopen('http://localhost:4040/api/tunnels')
        data = json.loads(response.read())
        
        if not data['tunnels']:
            print("Error: No active ngrok tunnels", file=sys.stderr)
            return None
        
        https_url = data['tunnels'][0]['public_url']
        wss_url = https_url.replace('https://', 'wss://')
        
        return {
            'webhook': https_url,
            'websocket': wss_url
        }
    except URLError:
        print("Error: ngrok is not running (http://localhost:4040 not accessible)", file=sys.stderr)
        print("Start ngrok: make ngrok", file=sys.stderr)
        return None
    except Exception as e:
        print(f"Error: {e}", file=sys.stderr)
        return None


def update_env_file(urls):
    """Update .env.local with ngrok URLs."""
    content = f"""# Auto-generated ngrok URLs
# Generated by: scripts/get_ngrok_url.py

WEBHOOK_BASE_URL={urls['webhook']}
WEBSOCKET_BASE_URL={urls['websocket']}
"""
    
    with open('.env.local', 'w') as f:
        f.write(content)
    
    print(f"âœ… Updated .env.local with ngrok URLs")


def print_export_statements(urls):
    """Print shell export statements."""
    print(f"export WEBHOOK_BASE_URL={urls['webhook']}")
    print(f"export WEBSOCKET_BASE_URL={urls['websocket']}")


def main():
    parser = argparse.ArgumentParser(description='Get ngrok URL')
    parser.add_argument('--update', action='store_true',
                        help='Update .env.local file')
    parser.add_argument('--env', action='store_true',
                        help='Print export statements for shell')
    parser.add_argument('--json', action='store_true',
                        help='Output as JSON')
    
    args = parser.parse_args()
    
    urls = get_ngrok_url()
    if not urls:
        sys.exit(1)
    
    if args.update:
        update_env_file(urls)
    elif args.env:
        print_export_statements(urls)
    elif args.json:
        print(json.dumps(urls, indent=2))
    else:
        print(f"Webhook URL:   {urls['webhook']}")
        print(f"WebSocket URL: {urls['websocket']}")


if __name__ == '__main__':
    main()

