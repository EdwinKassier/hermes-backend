name: Deploy

on:
  push:
    branches:
      - develop
      - master
      - prod

env:
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  RUN_REGION: us-central1
  REPO_NAME: ${{ github.event.repository.name }}
  ARTIFACT_REGISTRY_REPO_NAME: ashes # Your Artifact Registry repository name
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true

jobs:
  lint:
      name: Linting and Quality Checks
      runs-on: ubuntu-latest

      steps:
        - name: Checkout the code
          uses: actions/checkout@v2
        - name: Set up Python
          uses: actions/setup-python@v4
          with:
            python-version: '3.10'
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install pylint
            pip install umsgpack
            pip install pylint-fail-under
        - name: Code review
          run: find . -name '*.py' -print -exec pylint {} \;
        - name: Analyze code
          run: |
                for file in */*.py; do pylint "$file" --fail-under=0.0; done

  setup-build-deploy:
    name: Setup, Build, and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Extract branch name and save to service name
        shell: bash
        id: extract_branch
        run: echo "::set-env name=SERVICE_NAME::$(echo ${GITHUB_REF#refs/heads/})-$REPO_NAME"

      - name: Print service name
        run: echo $SERVICE_NAME

      - name: Generate credentials file
        run: echo "${{ secrets.SA_KEY_JSON }}" > credentials.json

      - name: Upload credentials file
        uses: actions/upload-artifact@v4
        with:
          name: credentials
          path: credentials.json
          retention-days: 1

      - name: Generate .env file
        run: echo ${{ secrets.ENV_FILE }} | base64 --decode > .env

      - name: Upload .env file
        uses: actions/upload-artifact@v4
        with:
          name: env
          path: .env
          retention-days: 1

      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.SA_KEY_JSON }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: 'Use gcloud CLI'
        run: 'gcloud info'

      # Configure Docker for Artifact Registry
      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.RUN_REGION }}-docker.pkg.dev --quiet

      # Build and push image to Google Artifact Registry
      - name: Build
        run: |-
          gcloud builds submit \
            --quiet \
            --tag "${{ env.RUN_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO_NAME }}/${{ env.SERVICE_NAME }}:$GITHUB_SHA" \
            --project=${{ env.PROJECT_ID }} # Ensure project is specified for Cloud Build

      # Deploy image from Artifact Registry to Cloud Run
      - name: Deploy
        run: |-
          gcloud run deploy "$SERVICE_NAME" \
            --quiet \
            --region "$RUN_REGION" \
            --image "${{ env.RUN_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO_NAME }}/${{ env.SERVICE_NAME }}:$GITHUB_SHA" \
            --platform "managed" \
            --allow-unauthenticated \
            --project=${{ env.PROJECT_ID }} # Ensure project is specified for Cloud Run
            # Consider adding --service-account flag for specific Cloud Run identity